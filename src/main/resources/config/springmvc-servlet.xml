<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
<!-- ①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.autocompile.controller"/>
    <mvc:annotation-driven/>
 	<mvc:resources mapping="/public/**" location="/public/" cache-period="31556926" />
 	<mvc:default-servlet-handler/> 
   
    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
  		<property name="messageConverters">
		   <list>
		   	<bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                <property name="supportedMediaTypes">  
                    <list>
								<value>text/html;charset=UTF-8</value>
                          <value>application/json;charset=UTF-8</value>
                    </list>  
                </property>  
            </bean>  
		    	<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
		   </list>
  		</property>
	</bean>
	
	<!--  ③：对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />
   
<!-- 	<bean id="remoteAddrInterceptor" class="com.autocompile.interceptor.RemoteAddrInterceptor" />
	<bean id="logTypeInterceptor" class="com.autocompile.interceptor.LogTypeInterceptor" />
	<bean id="authTypeInterceptor" class="com.autocompile.interceptor.AuthTypeInterceptor" />
    <mvc:interceptors> 
    	<ref bean="authTypeInterceptor" />
    	<ref bean="remoteAddrInterceptor" />
    	<ref bean="logTypeInterceptor" />
    	使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求
    	
	</mvc:interceptors> -->
	 

</beans>
